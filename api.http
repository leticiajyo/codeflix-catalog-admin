## valid uuid = 8f4b7b9c-3f7a-4b6c-8b0c-1c9c5b8b9b6a

###
@jwtToken = eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiYWRtaW4tY2F0YWxvZyJdfSwiaWF0IjoxNzI5NTQ0NDExLCJleHAiOjE3Mjk2MzA4MTF9.MIQ5ej8Az9QXZRZqAgpWpIt62LPTpCBd-eCpXAs90x4D3CagIrwvEvVQm-aK95VDr2mbCSDoYKYGcPxZcyvek55iPlXKs1wTBN2MbkkpSdmeloTrmgN5yXN7IdRC-2BujP2c_ftLe5cnVL6dNE-IfAev6VLRH6jdaS7Treevo5IrZ4phk55_zk-VJJztGUEwKMdM4itumCBSdjHpTQmWSTsB9pE7J3rRKSHMc-Dxr_UsC2Nd3iFLo05EgOCaJjd0h6KS-OcrW0zDonSHgAjTd8DYKozUONDw7yiFdGQXXqLUrVMwVeMF0e5qugcyvVe6ZQJMzJKzYYQP6eVzU1E3EQ




### Create Category
# @name createCategory
POST http://localhost:3000/categories
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
    "name": "Category 1",
    "description": "Description 1"
}
###

@categoryId = {{createCategory.response.body.data.id}}

### Search Categories
GET http://localhost:3000/categories
Authorization: Bearer {{jwtToken}}

### Find One Category
GET http://localhost:3000/categories/{{categoryId}}
Authorization: Bearer {{jwtToken}}


### Create Genre
# @name createGenre
POST http://localhost:3000/genres
Content-Type: application/json

{
    "name": "Genre 1",
    "categoryIds": [
        "{{categoryId}}"
    ]
}
###

@genreId = {{createGenre.response.body.data.id}}

### Find One Genre
GET http://localhost:3000/genres/{{genreId}}



### Create Cast Member
# @name createCastMember
POST http://localhost:3000/cast-members
Content-Type: application/json

{
    "name": "Cast Member 1",
    "type": 1
}
###

@castMemberId = {{createCastMember.response.body.data.id}}

### Find One Cast Member
GET http://localhost:3000/cast-members/{{castMemberId}}



### Create Video
# @name createVideo
POST http://localhost:3000/videos
Content-Type: application/json

{
    "title": "Video 1",
    "description": "Description 1",
    "yearLaunched": 2020,
    "isOpened": false,
    "rating": "L",
    "duration": 90,
    "categoryIds": [
        "{{categoryId}}"
    ],
    "genreIds": [
        "{{genreId}}"
    ],
    "castMemberIds": [
        "{{castMemberId}}"
    ]
}
###

@videoId = {{createVideo.response.body.data.id}}

### Find One Video
GET http://localhost:3000/videos/{{videoId}}

### Update Video
# @name updateVideo
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: application/json

{
    "title": "Video 1aaaa",
    "description": "Description 1aaaa",
    "yearLaunched": 2021,
    "isOpened": true,
    "rating": "L",
    "duration": 90,
    "categoryIds": [
        "{{categoryId}}"
    ],
    "genreIds": [
        "{{genreId}}"
    ],
    "castMemberIds": [
        "{{castMemberId}}"
    ]
}
###

### Invalid update Video request
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1234

------WebKitFormBoundary1234
Content-Disposition: form-data; name="video"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json
------WebKitFormBoundary1234
Content-Disposition: form-data; name="title"
Content-Type: text/plain

video teste
------WebKitFormBoundary1234--

### Upload Video file
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1234

------WebKitFormBoundary1234
Content-Disposition: form-data; name="video"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json
------WebKitFormBoundary1234--




###
### It's necessary to use host.docker.internal, because this request is being made from inside the dev container,
### otherwise from outside we could use localhost:8080
POST http://host.docker.internal:8080/realms/codeflix/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

username=admin@user.com
&password=admin
&grant_type=password
&client_id=codeflix-admin-frontend

### Openid connect server configs
GET http://host.docker.internal:8080/realms/codeflix/.well-known/openid-configuration

### Certificates
GET http://host.docker.internal:8080/realms/codeflix/protocol/openid-connect/certs


###
### Endpoint to generate token locally
POST http://localhost:3000/auth
Content-Type: application/json

{
    "email": "admin@user.com",
    "password": "123456"
}

###
GET http://localhost:3000/auth
Content-Type: application/json
Authorization: Bearer {{jwtToken}}
